-------------------exp7 iterator--------------------------- node iterator.js

//user defined iterable
class CustomerList {
    constructor(customers){
       //adding customer objects to an array
       this.customers = [].concat(customers)
    }
    //implement iterator function
    [Symbol.iterator](){
       let count=0;
       let customers = this.customers
       return {
          next:function(){
          //retrieving a customer object from the array
             let customerVal = customers[count];
             count+=1;
             if(count<=customers.length){
                return {
                   value:customerVal,
                   done:false
                }
             }
             //return true if all customer objects are iterated
             return {done:true}
          }
       }
    }
 }
 //create customer objects
 let c1={
    firstName:'Sachin',
    lastName:'Tendulkar'
 }
 let c2={
    firstName:'Rahul',
    lastName:'Dravid'
 }
 //define a customer array and initialize it let customers=[c1,c2]
 //pass customers to the class' constructor
 let customers=[c1,c2]
 let customersObj = new CustomerList(customers);
 //iterating using for..of
 for(let c of customersObj){
    console.log(c)
 }
 //iterating using the next() method
 let iter = customersObj[Symbol.iterator]();
 console.log(iter.next())
 console.log(iter.next())
 console.log(iter.next())


-----------promises------------------
const myPromise = new Promise((resolve, reject) => {
	if (Math.random() > 0) {
		console.log('resolving the promise ...');
		resolve('Hello, Positive :)');
	}
	reject(new Error('No place for Negative here :('));
});

const Fulfilled = (fulfilledValue) => console.log(fulfilledValue);
const Rejected = (error) => console.log(error);
myPromise.then(Fulfilled, Rejected);

myPromise.then((fulfilledValue) => {
	console.log(fulfilledValue);
}).catch(err => console.log(err));

